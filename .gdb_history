c
s
s
c
b main
r
s
b main
r
b main
r
s
s
b main
r
s
b length
r
s
s
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
s
s
print *(int*) ($($rax)
print *(int*) ($(rax)
print *(int*) ($$rax)
print *(int*) ($rax)
print *(int*) (($rax + 8))
print *(int*) (($rax + 16))
print *(int*) ([$rax + 16])
print *(int*) (($rax + 16))
print *(int*) (($rax + 24))
b length
r
s
s
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
s
s
print *(int*) ($($rax)
print *(int*) ($(rax)
print *(int*) ($$rax)
print *(int*) ($rax)
print *(int*) (($rax + 8))
print *(int*) (($rax + 16))
print *(int*) ([$rax + 16])
print *(int*) (($rax + 16))
print *(int*) (($rax + 24))
b Counter__value
r
b Counter__value
b Counter__incr
r
c
c
s
b Counter__value
b Counter__incr
r
c
c
s
b Counter__incr
r
c
s
b Counter__incr
r
c
s
break test
r
run
run
s
s
c
exit
break test
skip printString
skip printBool
skip printInt
run
s
skip
c
exit
skip printInt
break L38
run
rs
reverse-step
exitr
exit
break XD
run
s
i r rax
p $rax
p/t $rax
p/t [$rbp-40]
p/t *(int*)($rbp-40)
p/t *(int*)($rbp-32)
exit
break XD1
break XD2
break XD
run
s
p/t $rdi
exit
break XD3
r
s
p/t $rax
p $rax
print rax
print $rax
p/u $rax
c
s
s
break XD
s
p/x $r12
s
p/u $rax
s
s
s
c
s
s
i r eflags
p/u $rax
p/t $rax
p/s $rax
p/d $rax
p/u $rax
p/t $eax
p/q $rax
x rax
x $rax
x ($rpb+8)
x *(int*)($rpb+8)
x $rbp
x/d $rbp
x/d $rbp+8
x/d $rbp-8
x/d $rbp-16
x/b $rbp-16
x/b $rbp-40
x/d $rbp-40
x/d $rbp-48
rs
exit
break test
r
s
c
s
break XD3
c
s
s
x/dw *(int*)($rbp-0x20)
x/dw *(int*)($rbp)
x/dw *(int*)($rbp-0x20)
x/dw ($rbp-0x20)
x/db ($rbp-0x20)
x/4db ($rbp-0x20)
s
x/4db ($rbp-0x28)
x/4xb ($rbp-0x28)
x/4xw ($rbp-0x28)
x/xw ($rbp-0x28)
x/xg ($rbp-0x28)
s
x/xg ($rbp-0x30)
break test
r
s
c
s
break XD3
c
s
s
x/dw *(int*)($rbp-0x20)
x/dw *(int*)($rbp)
x/dw *(int*)($rbp-0x20)
x/dw ($rbp-0x20)
x/db ($rbp-0x20)
x/4db ($rbp-0x20)
s
x/4db ($rbp-0x28)
x/4xb ($rbp-0x28)
x/4xw ($rbp-0x28)
x/xw ($rbp-0x28)
x/xg ($rbp-0x28)
s
x/xg ($rbp-0x30)
