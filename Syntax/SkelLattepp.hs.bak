-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Syntax.SkelLattepp where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Syntax.AbsLattepp as AbsLattepp

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsLattepp.Ident -> Result
transIdent x = case x of
  AbsLattepp.Ident string -> failure x

transProgram :: Show a => AbsLattepp.Program' a -> Result
transProgram x = case x of
  AbsLattepp.Program _ topdefs -> failure x

transTopDef :: Show a => AbsLattepp.TopDef' a -> Result
transTopDef x = case x of
  AbsLattepp.FnDef _ type_ ident args block -> failure x
  AbsLattepp.ClassDef _ ident classblock -> failure x
  AbsLattepp.ExtClassDef _ ident1 ident2 classblock -> failure x

transArg :: Show a => AbsLattepp.Arg' a -> Result
transArg x = case x of
  AbsLattepp.Arg _ type_ ident -> failure x

transBlock :: Show a => AbsLattepp.Block' a -> Result
transBlock x = case x of
  AbsLattepp.Block _ stmts -> failure x

transClassBlock :: Show a => AbsLattepp.ClassBlock' a -> Result
transClassBlock x = case x of
  AbsLattepp.ClassBlock _ classstmts -> failure x

transClassStmt :: Show a => AbsLattepp.ClassStmt' a -> Result
transClassStmt x = case x of
  AbsLattepp.ClassEmpty _ -> failure x
  AbsLattepp.ClassDecl _ type_ items -> failure x
  AbsLattepp.ClassMethod _ type_ ident args block -> failure x

transStmt :: Show a => AbsLattepp.Stmt' a -> Result
transStmt x = case x of
  AbsLattepp.Empty _ -> failure x
  AbsLattepp.BStmt _ block -> failure x
  AbsLattepp.Decl _ type_ items -> failure x
  AbsLattepp.Ass _ extident expr -> failure x
  AbsLattepp.Incr _ extident -> failure x
  AbsLattepp.Decr _ extident -> failure x
  AbsLattepp.Ret _ expr -> failure x
  AbsLattepp.VRet _ -> failure x
  AbsLattepp.Cond _ expr stmt -> failure x
  AbsLattepp.CondElse _ expr stmt1 stmt2 -> failure x
  AbsLattepp.While _ expr stmt -> failure x
  AbsLattepp.For _ type_ ident extident stmt -> failure x
  AbsLattepp.SExp _ expr -> failure x

transItem :: Show a => AbsLattepp.Item' a -> Result
transItem x = case x of
  AbsLattepp.NoInit _ ident -> failure x
  AbsLattepp.Init _ ident expr -> failure x

transExtIdent :: Show a => AbsLattepp.ExtIdent' a -> Result
transExtIdent x = case x of
  AbsLattepp.Id _ ident -> failure x
  AbsLattepp.ArrId _ ident expr -> failure x
  AbsLattepp.AttrId _ expr1 expr2 -> failure x

transPrimType :: Show a => AbsLattepp.PrimType' a -> Result
transPrimType x = case x of
  AbsLattepp.Int _ -> failure x
  AbsLattepp.Str _ -> failure x
  AbsLattepp.Bool _ -> failure x
  AbsLattepp.Void _ -> failure x

transType :: Show a => AbsLattepp.Type' a -> Result
transType x = case x of
  AbsLattepp.Primitive _ primtype -> failure x
  AbsLattepp.ObjectType _ ident -> failure x
  AbsLattepp.Array _ type_ -> failure x
  AbsLattepp.Fun _ type_ types -> failure x

transExpr :: Show a => AbsLattepp.Expr' a -> Result
transExpr x = case x of
  AbsLattepp.ECast _ ident expr -> failure x
  AbsLattepp.ECastPrim _ primtype expr -> failure x
  AbsLattepp.ENewObject _ ident -> failure x
  AbsLattepp.ENewArr _ type_ expr -> failure x
  AbsLattepp.ENull _ -> failure x
  AbsLattepp.EObject _ expr1 expr2 -> failure x
  AbsLattepp.EArr _ ident expr -> failure x
  AbsLattepp.EVar _ ident -> failure x
  AbsLattepp.ELitInt _ integer -> failure x
  AbsLattepp.ELitTrue _ -> failure x
  AbsLattepp.ELitFalse _ -> failure x
  AbsLattepp.EApp _ ident exprs -> failure x
  AbsLattepp.EString _ string -> failure x
  AbsLattepp.Neg _ expr -> failure x
  AbsLattepp.Not _ expr -> failure x
  AbsLattepp.EMul _ expr1 mulop expr2 -> failure x
  AbsLattepp.EAdd _ expr1 addop expr2 -> failure x
  AbsLattepp.ERel _ expr1 relop expr2 -> failure x
  AbsLattepp.EAnd _ expr1 expr2 -> failure x
  AbsLattepp.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => AbsLattepp.AddOp' a -> Result
transAddOp x = case x of
  AbsLattepp.Plus _ -> failure x
  AbsLattepp.Minus _ -> failure x

transMulOp :: Show a => AbsLattepp.MulOp' a -> Result
transMulOp x = case x of
  AbsLattepp.Times _ -> failure x
  AbsLattepp.Div _ -> failure x
  AbsLattepp.Mod _ -> failure x

transRelOp :: Show a => AbsLattepp.RelOp' a -> Result
transRelOp x = case x of
  AbsLattepp.LTH _ -> failure x
  AbsLattepp.LE _ -> failure x
  AbsLattepp.GTH _ -> failure x
  AbsLattepp.GE _ -> failure x
  AbsLattepp.EQU _ -> failure x
  AbsLattepp.NE _ -> failure x
